agent:
  name: "e2e_test_generation_upstream"
  display_name: "Upstream E2E Test Generator"
  description: "Independent workflow: Generate E2E test code in upstream component repository based on existing test cases. Focuses on component-specific testing."

role:
  title: "Upstream E2E Generator"
  
task:
  primary_goal: "Generate E2E tests in upstream component repository"

  subtasks:
    - name: "Upstream Repository Setup"
      timeout: "40s"
      input_requirements: ["jira_issue_key", "requirements_input"]
      steps:
        - "Extract component name from test requirements output"
        - "Create temp_repos directory if it doesn't exist: mkdir -p temp_repos"
        - "Load E2E generation rules from local directory: config/rules/e2e_rules/e2e_test_case_guidelines.md"
        - "Check if component repository exists: temp_repos/{COMPONENT}/"
        - "cd into temp_repos/{COMPONENT}/"
        # Replace with your own repository
        - "If not exists: Clone https://github.com/openshift/{COMPONENT}.git to temp_repos/{COMPONENT}/"
        - "Check git status and branch"
        - "Switch to main/master branch: git checkout main"
        - "Fetch latest: git pull origin main (from openshift/{COMPONENT})"
        - "Create or checkout branch: ai-e2e-{JIRA_KEY} from main branch"
        - "Ensure working directory is clean and ready"
      success_criteria:
        - "Upstream component repository ready"
        - "Branch ai-e2e-{JIRA_KEY} ready for development"
        - "Repository is in clean state"

    - name: "Component E2E Test Generation"
      timeout: "120s"
      input_requirements: ["requirements_input", "test_case_input", "jira_issue_key"]
      steps:
        # - "Load test case from Polarion, filter test case by jira issue key (if needed)"
        - "Load upstream E2E rules from local directory: config/rules/e2e_rules/e2e_test_case_guidelines.md"
        - "Analyze existing E2E tests in upstream repo to learn testing patterns"
        - "Focus on component controller behavior and CRD lifecycle testing"
        - "Extract test scenarios suitable for component-level E2E validation from test_case_input"
        - "Generate component-focused E2E test code following upstream patterns"
        - "Write test file in upstream repo following component test structure"
        - "Add AI authorship information: '// Auto-generated by AI Test Generation Assistant (Upstream)' and '// JIRA: {JIRA_KEY}'"
      success_criteria:
        - "Component E2E test file created in upstream repo"
        - "Test logic focuses on component behavior"

    - name: "Upstream Validation"
      timeout: "60s"
      input_requirements: ["jira_issue_key"]
      steps:
        - "Load validation commands from upstream E2E rules"
        - "Run 'make verify' or component-specific E2E validation command"
        - "Check output for errors (syntax, imports, formatting)"
        - "If errors detected:"
        - "  Attempt to fix common issues (missing imports, formatting)"
        - "  Re-run validation command"
        - "  If still failing, log errors for manual intervention"
      success_criteria:
        - "Upstream E2E tests compile and validate successfully"

input:
  required:
    - name: "jira_issue_key"
      type: "string"
      description: "JIRA issue key"
      example: "HIVE-2883"
    - name: "requirements_input"
      type: "file"
      description: "Test requirements"
      path: "workflow_outputs/{COMPONENT}/{JIRA_KEY}/phases/test_requirements_output.yaml"
    - name: "test_case_input"
      type: "file"
      description: "Test case scenarios for upstream E2E analysis"
      path: "workflow_outputs/{COMPONENT}/{JIRA_KEY}/test_cases/{JIRA_KEY}_test_case.md"

output:
  files:
    - name: "{JIRA_KEY}_upstream_e2e_results.md"
      path: "workflow_outputs/{COMPONENT}/{JIRA_KEY}/phases/{JIRA_KEY}_upstream_e2e_results.md"
      format: "markdown"
      description: "Upstream E2E test generation results and repository integration status"
      template: "config/templates/test_cases_template.yaml"

tools:
  - name: "Git operations"
    description: "Upstream repository cloning, branching, and management"
    operations: ["git clone", "git checkout", "git merge", "git push"]
  - name: "File operations"
    description: "Read inputs, write upstream E2E test files, and result documentation"
    operations: ["Read", "Write", "Glob", "Edit"]
  - name: "Build validation"
    description: "Run upstream component E2E validation commands"
    operations: ["make test-e2e", "make verify"]
  - name: "Repository discovery"
    description: "Intelligent GitHub repository discovery and validation"
    operations: ["GitHub API search", "Repository metadata analysis", "Component mapping cache"]
  requires_mcp_tools: ["WebFetch", "Terminal"]

configuration:
  dynamic_variables:
    - "{COMPONENT}"
    - "{JIRA_KEY}"
  repository_management: true
  validation_required: true
  template_replacement: true
  repository_type: "upstream_component"